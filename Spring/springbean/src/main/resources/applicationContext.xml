<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理
        创建bean的三种方式
        bean的作用范围
        bean对象的生命周期
    -->
    <!--创建bean的三种方式-->
    <!--
    第一种：适用默认的构造函数创建
        在spring的配置文件中使用bean标签，配置id和class属性之后，没有其他的标签和属性，此时，如果类中没有默认构造函数，对象无法创建

    <bean id="userService" class="com.sjl.service.impl.UserServiceImpl"/>
     -->

    <!--第二种方式：使用普通工厂中的方法创建对象（某个类中的方法）
    <bean id="instanceFactory" class="com.sjl.factory.InstanceFactory" ></bean>
    <bean id="userService" factory-bean="instanceFactory" factory-method="getUserService"/>
    -->
    <!--使用静态工厂中的静态方法创建对象（某个类中的静态方法）
    <bean id="userService" class="com.sjl.factory.StaticFactory" factory-method="getUserService"/>
    -->

    <!--bean的作用范围
        scope属性：用于指定bean的作用范围
        取值：
            singleton:单例（默认值）
            prototype:多例的
            request：作用于web应用的请求范围
            session：web应用的会话范围
            global-session：集群环境的会话范围（全局会话范围），不是集群环境时，就是session
    <bean id="userService" class="com.sjl.service.impl.UserServiceImpl" scope="prototype"/>
    -->
    <!--bean对象的生命周期
        单例对象：
            出生：当容器创建时对象出生
            活着：只要容器存在，对象一直活着
            死亡：容器销毁，对象消亡
        多例对象：
            出生：使用对象时，创建对象
            活着：对象在使用过程中就一直活着
            死亡：但对象长时间不用，且没有别的对象引用时，被Java的垃圾回收GC回收
    -->
    <bean id="userService" class="com.sjl.service.impl.UserServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"/>

</beans>